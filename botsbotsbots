"""
Twitter AI Bot using Tweepy and Anthropic's Claude
Requirements:
- Python 3.8+
- macOS Big Sur
"""

import tweepy
import anthropic
import time
import os
from datetime import datetime
import logging
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='twitter_bot.log'
)

class TwitterAIBot:
    def __init__(self):
        # Twitter API credentials
        self.client = tweepy.Client(
            consumer_key=os.getenv('TWITTER_API_KEY'),
            consumer_secret=os.getenv('TWITTER_API_SECRET'),
            access_token=os.getenv('TWITTER_ACCESS_TOKEN'),
            access_token_secret=os.getenv('TWITTER_ACCESS_TOKEN_SECRET')
        )
        
        # Anthropic client initialization
        self.claude_client = anthropic.Anthropic(
            api_key=os.getenv('ANTHROPIC_API_KEY')
        )
        
    def generate_response(self, prompt):
        """Generate AI response using Claude API"""
        try:
            response = self.claude_client.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=100,
                temperature=0.7,
                system="You are a helpful AI assistant managing a Twitter account. Keep responses engaging but concise, suitable for Twitter's character limit.",
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            # Extract the text content from the response
            return response.content[0].text.strip()
        except Exception as e:
            logging.error(f"Error generating Claude response: {e}")
            return None

    def post_tweet(self, content):
        """Post tweet to Twitter"""
        try:
            # Ensure content meets Twitter's character limit
            if len(content) > 280:
                content = content[:277] + "..."
                
            tweet = self.client.create_tweet(text=content)
            logging.info(f"Tweet posted successfully: {content}")
            return tweet
        except Exception as e:
            logging.error(f"Error posting tweet: {e}")
            return None

    def respond_to_mentions(self):
        """Respond to mentions using AI-generated content"""
        try:
            # Get mentions
            mentions = self.client.get_users_mentions(
                id=self.client.get_me()[0].id,
                max_results=10
            )
            
            if not mentions.data:
                return
            
            for mention in mentions.data:
                # Generate AI response
                prompt = f"Craft a friendly and engaging response to this tweet (max 280 characters): {mention.text}"
                response = self.generate_response(prompt)
                
                if response:
                    # Reply to mention
                    self.client.create_tweet(
                        text=response,
                        in_reply_to_tweet_id=mention.id
                    )
                    logging.info(f"Replied to mention {mention.id}: {response}")
                
        except Exception as e:
            logging.error(f"Error processing mentions: {e}")

    def generate_content(self):
        """Generate original content for tweets"""
        prompts = [
            "Share an interesting fact about technology or AI that would intrigue Twitter users.",
            "Create a thought-provoking question about the future of technology.",
            "Generate a helpful tip about digital wellbeing or productivity.",
            "Share an inspiring quote about innovation or creativity."
        ]
        prompt = prompts[int(datetime.now().hour / 6) % len(prompts)]
        return self.generate_response(prompt)

    def run(self):
        """Main bot loop"""
        logging.info("Starting Twitter AI Bot with Claude")
        while True:
            try:
                self.respond_to_mentions()
                # Generate and post original content every 4 hours
                if datetime.now().hour % 4 == 0:
                    content = self.generate_content()
                    if content:
                        self.post_tweet(content)
                
                # Sleep for 15 minutes
                time.sleep(900)
                
            except Exception as e:
                logging.error(f"Error in main loop: {e}")
                time.sleep(300)  # Wait 5 minutes before retrying

if __name__ == "__main__":
    # Create .env file with your API keys
    """
    TWITTER_API_KEY=your_api_key
    TWITTER_API_SECRET=your_api_secret
    TWITTER_ACCESS_TOKEN=your_access_token
    TWITTER_ACCESS_TOKEN_SECRET=your_access_token_secret
    ANTHROPIC_API_KEY=your_anthropic_api_key
    """
    
    bot = TwitterAIBot()
    bot.run()